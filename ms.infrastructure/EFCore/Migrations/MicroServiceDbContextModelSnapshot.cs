// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ms.infrastructure.EFCore.Migrations
{
    [DbContext(typeof(MicroServiceDbContext))]
    partial class MicroServiceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TFuncGroup", b =>
                {
                    b.Property<int>("FuncGroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuncGroupID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FuncGroupID");

                    b.ToTable("TFunctionGroup");
                });

            modelBuilder.Entity("TFuncGroupRel", b =>
                {
                    b.Property<int>("FuncID")
                        .HasColumnType("integer");

                    b.Property<int>("FuncGroupID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("FuncID", "FuncGroupID");

                    b.HasIndex("FuncGroupID");

                    b.ToTable("TFuncGroupRel");
                });

            modelBuilder.Entity("TFunction", b =>
                {
                    b.Property<int>("FuncID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FuncID"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("FuncID");

                    b.ToTable("TFunction");
                });

            modelBuilder.Entity("TUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mima")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId");

                    b.ToTable("TUser");
                });

            modelBuilder.Entity("TUserFuncGroupRel", b =>
                {
                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.Property<int>("FuncGroupID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserID", "FuncGroupID");

                    b.ToTable("TUserFuncGroupRel");
                });

            modelBuilder.Entity("TFuncGroupRel", b =>
                {
                    b.HasOne("TFuncGroup", "FuncGroup")
                        .WithMany("FuncGroupRels")
                        .HasForeignKey("FuncGroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TFunction", "Func")
                        .WithMany("FuncGroupRels")
                        .HasForeignKey("FuncID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Func");

                    b.Navigation("FuncGroup");
                });

            modelBuilder.Entity("TUserFuncGroupRel", b =>
                {
                    b.HasOne("TFuncGroup", "FuncGroup")
                        .WithMany("UserFuncGroupRels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TUser", "User")
                        .WithMany("UserFuncGroupRels")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuncGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TFuncGroup", b =>
                {
                    b.Navigation("FuncGroupRels");

                    b.Navigation("UserFuncGroupRels");
                });

            modelBuilder.Entity("TFunction", b =>
                {
                    b.Navigation("FuncGroupRels");
                });

            modelBuilder.Entity("TUser", b =>
                {
                    b.Navigation("UserFuncGroupRels");
                });
#pragma warning restore 612, 618
        }
    }
}
